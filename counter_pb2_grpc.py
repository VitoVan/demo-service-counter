# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import counter_pb2 as counter__pb2


class CounterStub(object):
  """The Counter service definition.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.incr = channel.unary_unary(
        '/demo.counter.Counter/incr',
        request_serializer=counter__pb2.CounterRequest.SerializeToString,
        response_deserializer=counter__pb2.CounterReply.FromString,
        )
    self.get = channel.unary_unary(
        '/demo.counter.Counter/get',
        request_serializer=counter__pb2.CounterRequest.SerializeToString,
        response_deserializer=counter__pb2.CounterReply.FromString,
        )


class CounterServicer(object):
  """The Counter service definition.
  """

  def incr(self, request, context):
    """Add count
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def get(self, request, context):
    """Get count
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_CounterServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'incr': grpc.unary_unary_rpc_method_handler(
          servicer.incr,
          request_deserializer=counter__pb2.CounterRequest.FromString,
          response_serializer=counter__pb2.CounterReply.SerializeToString,
      ),
      'get': grpc.unary_unary_rpc_method_handler(
          servicer.get,
          request_deserializer=counter__pb2.CounterRequest.FromString,
          response_serializer=counter__pb2.CounterReply.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'demo.counter.Counter', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
